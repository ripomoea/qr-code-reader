import versions.Versions
import dependencies.Dependencies

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion Versions.compileSdkVersion
    defaultConfig {
        applicationId "com.takechee.qrcodereader"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        buildConfigField("String", "GIT_COMMIT_HASH", "\"${commitHash}\"")
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
        staging {
            initWith(debug)
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            manifestPlaceholders = [crashlyticsEnabled: true]
        }
        release {
            minifyEnabled false
            manifestPlaceholders = [crashlyticsEnabled: true]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    testBuildType "staging"

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    // Required for AR because it includes a library built with Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // More than one file was found with OS independent path 'META-INF/LICENSE'
    // https://stackoverflow.com/a/47509465
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    implementation project(':model')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Dependencies.Kotlin.stdlib
    implementation Dependencies.AndroidX.coreKtx
    implementation Dependencies.AndroidX.appcompat
    implementation Dependencies.AndroidX.fragment
    implementation Dependencies.AndroidX.constraintLayout
    implementation Dependencies.AndroidX.recyclerview
    implementation Dependencies.AndroidX.viewpager2
    implementation Dependencies.AndroidX.browser
    implementation Dependencies.AndroidX.preferenceKtx
    implementation Dependencies.AndroidX.material

    kapt Dependencies.AndroidX.Lifecycle.compiler
    implementation Dependencies.AndroidX.Lifecycle.liveDataKtx
    implementation Dependencies.AndroidX.Lifecycle.viewModelKtx
    implementation Dependencies.AndroidX.Lifecycle.savedState

    implementation Dependencies.AndroidX.Navigation.fragmentKtx
    implementation Dependencies.AndroidX.Navigation.uiKtx

    implementation Dependencies.AndroidX.Room.ktx
    implementation Dependencies.AndroidX.Room.runtime
    kapt Dependencies.AndroidX.Room.compiler
    testImplementation Dependencies.AndroidX.Room.testing

    implementation Dependencies.AndroidX.Licenses.core

    implementation Dependencies.Dagger.android
    implementation Dependencies.Dagger.androidSupport
    kapt Dependencies.Dagger.compiler
    kapt Dependencies.Dagger.processor
    compileOnly Dependencies.Dagger.assistedAnnotations
    kapt Dependencies.Dagger.assistedProcessor

    implementation 'com.google.firebase:firebase-analytics:17.3.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0-beta04'

    implementation Dependencies.ZXing.core
    implementation Dependencies.ZXing.embedded

    implementation Dependencies.Groupie.core
    implementation Dependencies.Groupie.dataBinding

    implementation Dependencies.Permission.dispatcher
    kapt Dependencies.Permission.processor
    implementation Dependencies.Threeten.androidBackport

    implementation Dependencies.insetterDbx
    implementation Dependencies.insetterKtx

    implementation Dependencies.jsourp
    implementation Dependencies.lottie
    implementation Dependencies.indicator

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

static def getCommitHash() {
    'git rev-parse --short HEAD'.execute().text.trim()
}

apply plugin: 'com.google.gms.google-services'
